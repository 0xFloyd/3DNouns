// Auto-generated by https://github.com/react-spring/gltfjsx

import * as THREE from 'three';
import React, { useEffect, useRef, useState } from 'react';
import { useThree, useLoader, useFrame } from '@react-three/fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';

export default function Stacy({ mouse, ...props }) {
  const group = useRef();
  const { nodes, animations } = useLoader(GLTFLoader, '/stacy.glb');
  const texture = useLoader(THREE.TextureLoader, '/stacy.jpg');
  const actions = useRef();
  const [mixer] = useState(() => new THREE.AnimationMixer());
  useFrame((state, delta) => mixer.update(delta));
  useEffect(() => {
    actions.current = { idle: mixer.clipAction(animations[8], group.current) };
    actions.current.idle.play();
    return () => animations.forEach((clip) => mixer.uncacheClip(clip));
  }, []);

  const { size } = useThree();
  useFrame((state, delta) => {
    const mouse = {
      x: size.width / 2 + (state.mouse.x * size.width) / 2,
      y: size.height / 2 + (-state.mouse.y * size.height) / 2,
    };
    mixer.update(delta);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <primitive object={nodes['mixamorigHips']} />
        <skinnedMesh
          receiveShadow
          castShadow
          geometry={nodes['stacy'].geometry}
          skeleton={nodes['stacy'].skeleton}
        >
          <meshStandardMaterial map={texture} map-flipY={false} skinning />
        </skinnedMesh>
      </group>
    </group>
  );
}
