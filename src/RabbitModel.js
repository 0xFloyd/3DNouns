import { Canvas, useLoader } from '@react-three/fiber';
import * as THREE from 'three';
import React, { Suspense, useRef, useState } from 'react';
import { OrbitControls, useGLTF } from '@react-three/drei';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

const RabbitModel = (props) => {
  const group = useRef();
  const { nodes, materials } = useGLTF('/rabbitTestRyan.gltf');

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      // visible={props.head === 'rabbit' ? true : false}
    >
      <mesh
        userData={{ part: 'body' }}
        castShadow
        receiveShadow
        geometry={nodes.Oren_396.geometry}
        material={nodes.Oren_396.material}
        position={[-0.07, 0.1, -0.04]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
        visible={props.body === 'purple' ? true : false}
      />
      <mesh
        userData={{ part: 'head' }}
        castShadow
        receiveShadow
        geometry={nodes.Oren_400.geometry}
        material={nodes.Oren_400.material}
        position={[-0.07, 0.21, -0.06]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
        visible={props.head === 'rabbit' ? true : false}
      />
      <mesh
        userData={{ part: 'glasses' }}
        castShadow
        receiveShadow
        geometry={nodes.Oren_401.geometry}
        material={nodes.Oren_401.material}
        position={[-0.09, 0.26, props.head === 'rabbit' ? 0.04 : 0.02]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
        visible={props.glasses === 'orange' ? true : false}
      />
      <mesh
        userData={{ part: 'hands' }}
        castShadow
        receiveShadow
        geometry={nodes.Oren_396_part.geometry}
        material={nodes.Oren_396_part.material}
        position={[-0.07, 0.08, -0.02]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
        visible={props.head === 'rabbit' ? true : false}
      />
      <mesh
        userData={{ part: 'feet' }}
        castShadow
        receiveShadow
        geometry={nodes.Oren_396_part_1.geometry}
        material={nodes.Oren_396_part_1.material}
        position={[-0.04, 0, -0.02]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
        visible={props.feet === 'white' ? true : false}
      />
      <mesh
        userData={{ part: 'pants' }}
        castShadow
        receiveShadow
        geometry={nodes.Oren_396_part_2.geometry}
        material={nodes.Oren_396_part_2.material}
        position={[-0.04, 0.01, -0.02]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
        visible={props.pants === 'grey' ? true : false}
      />
    </group>
  );
};

useGLTF.preload('/rabbitTestRyan.gltf');

// function Scene() {
//   const gltf = useLoader(GLTFLoader, "/crabTest.gltf");
//   return <primitive object={gltf.scene} />;
// }

export default RabbitModel;
